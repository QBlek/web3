TruffleContract {
  constructor: [Function: TruffleContract] {
    _constructorMethods: {
      configureNetwork: [Function: configureNetwork],
      setProvider: [Function: setProvider],
      new: [Function: new],
      at: [AsyncFunction: at],
      deployed: [AsyncFunction: deployed],
      defaults: [Function: defaults],
      hasNetwork: [Function: hasNetwork],
      isDeployed: [Function: isDeployed],
      detectNetwork: [AsyncFunction: detectNetwork],
      setNetwork: [Function: setNetwork],
      setNetworkType: [Function: setNetworkType],
      setWallet: [Function: setWallet],
      resetAddress: [Function: resetAddress],
      link: [Function: link],
      clone: [Function: clone],
      addProp: [Function: addProp],
      toJSON: [Function: toJSON],
      decodeLogs: [Function: decodeLogs]
    },
    _properties: {
      contract_name: [Object],
      contractName: [Object],
      gasMultiplier: [Object],
      timeoutBlocks: [Object],
      autoGas: [Object],
      numberFormat: [Object],
      abi: [Object],
      metadata: [Function: metadata],
      network: [Function: network],
      networks: [Function: networks],
      address: [Object],
      transactionHash: [Object],
      links: [Function: links],
      events: [Function: events],
      binary: [Function: binary],
      deployedBinary: [Function: deployedBinary],
      unlinked_binary: [Object],
      bytecode: [Object],
      deployedBytecode: [Object],
      sourceMap: [Object],
      deployedSourceMap: [Object],
      source: [Object],
      sourcePath: [Object],
      legacyAST: [Object],
      ast: [Object],
      compiler: [Object],
      schema_version: [Function: schema_version],
      schemaVersion: [Function: schemaVersion],
      updated_at: [Function: updated_at],
      updatedAt: [Function: updatedAt],
      userdoc: [Function: userdoc],
      devdoc: [Function: devdoc],
      networkType: [Object],
      immutableReferences: [Object],
      generatedSources: [Object],
      deployedGeneratedSources: [Object],
      db: [Object]
    },
    _property_values: {},
    _json: {
      contractName: 'BankAccount',
      abi: [Array],
      metadata: '{"compiler":{"version":"0.8.19+commit.7dd6d404"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"_address","type":"address"},{"indexed":false,"internalType":"uint256","name":"_value","type":"uint256"}],"name":"Info","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"_notif","type":"string"}],"name":"Log","type":"event"},{"inputs":[],"name":"balance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"faultedFunc","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"serverConfirm","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"state","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"transferSuccess","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"project:/contracts/BankAccount.sol":"BankAccount"},"evmVersion":"paris","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"project:/contracts/BankAccount.sol":{"keccak256":"0x6131f3249aa163cd4cf3b039d43c763629eaaa294e44a81e9e1608e2f615d902","license":"MIT","urls":["bzz-raw://b3c78bdd969036de460a537706a285e943ea5285e2a710272935e31a77f1a8f1","dweb:/ipfs/QmZ146aW9Dk2bVm7HCCApMxBzxzGT6iQ661PhPPp72P2fB"]}},"version":1}',
      bytecode: '0x60806040523480156200001157600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060018190555060006002819055506040518060400160405280600681526020017f616374697665000000000000000000000000000000000000000000000000000081525060039081620000a8919062000329565b5062000410565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200013157607f821691505b602082108103620001475762000146620000e9565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620001b17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000172565b620001bd868362000172565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200020a62000204620001fe84620001d5565b620001df565b620001d5565b9050919050565b6000819050919050565b6200022683620001e9565b6200023e620002358262000211565b8484546200017f565b825550505050565b600090565b6200025562000246565b620002628184846200021b565b505050565b5b818110156200028a576200027e6000826200024b565b60018101905062000268565b5050565b601f821115620002d957620002a3816200014d565b620002ae8462000162565b81016020851015620002be578190505b620002d6620002cd8562000162565b83018262000267565b50505b505050565b600082821c905092915050565b6000620002fe60001984600802620002de565b1980831691505092915050565b6000620003198383620002eb565b9150826002028217905092915050565b6200033482620000af565b67ffffffffffffffff81111562000350576200034f620000ba565b5b6200035c825462000118565b620003698282856200028e565b600060209050601f831160018114620003a157600084156200038c578287015190505b6200039885826200030b565b86555062000408565b601f198416620003b1866200014d565b60005b82811015620003db57848901518255600182019150602085019450602081019050620003b4565b86831015620003fb5784890151620003f7601f891682620002eb565b8355505b6001600288020188555050505b505050505050565b61125e80620004206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b146100e4578063accc5d0714610102578063b69ef8a81461010c578063b6b55f251461012a578063c19d93fb1461014657610093565b806312514bba146100985780632e1a7d4d146100b457806340546f49146100d057806354c47b2f146100da575b600080fd5b6100b260048036038101906100ad91906107a1565b610164565b005b6100ce60048036038101906100c991906107a1565b610190565b005b6100d86101ef565b005b6100e26101f9565b005b6100ec61020b565b6040516100f9919061080f565b60405180910390f35b61010a61022f565b005b6101146102ba565b6040516101219190610839565b60405180910390f35b610144600480360381019061013f91906107a1565b6102c0565b005b61014e610315565b60405161015b91906108e4565b60405180910390f35b61016c6103a3565b806002600082825461017e9190610935565b9250508190555061018d61046f565b50565b6101986104b6565b80600160008282546101aa9190610969565b925050819055507f2e2a4a34dacfe23211d7cd5f2269b17fe50bc4440e8ac080de1026da21e8007d336001546040516101e492919061099d565b60405180910390a150565b6101f76104fd565b565b610201610540565b61020961060c565b565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610237610653565b6002546001541061027257600254600160008282546102569190610969565b92505081905550600060028190555061026d61071f565b6102b8565b7fcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab60405161029f90610a38565b60405180910390a160006002819055506102b761060c565b5b565b60015481565b80600160008282546102d29190610935565b925050819055507f2e2a4a34dacfe23211d7cd5f2269b17fe50bc4440e8ac080de1026da21e8007d338260405161030a92919061099d565b60405180910390a150565b6003805461032290610a87565b80601f016020809104026020016040519081016040528092919081815260200182805461034e90610a87565b801561039b5780601f106103705761010080835404028352916020019161039b565b820191906000526020600020905b81548152906001019060200180831161037e57829003601f168201915b505050505081565b7f9651c33eb23976f7c15240e86443dc2ded40546fa9ba457a14abab4090e023b560036040516020016103d69190610b5b565b604051602081830303815290604052805190602001200361042b577fcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab60405161041e90610be4565b60405180910390a161046d565b600061046c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046390610c50565b60405180910390fd5b5b565b6040518060400160405280600781526020017f70656e64696e6700000000000000000000000000000000000000000000000000815250600390816104b39190610e36565b50565b6000600154116104fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f290610f7a565b60405180910390fd5b565b600061053e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105359061100c565b60405180910390fd5b565b7f3251d458325eb8af3e74d9d17295e910adb27e37ddeb21ea40cd424b6418cae260036040516020016105739190610b5b565b60405160208183030381529060405280519060200120036105c8577fcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab6040516105bb9061109e565b60405180910390a161060a565b6000610609576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106009061110a565b60405180910390fd5b5b565b6040518060400160405280600681526020017f6163746976650000000000000000000000000000000000000000000000000000815250600390816106509190610e36565b50565b7fb4d829413f0d2c4d74c8ff63e02c9925119a56008208dd29db841c5f35ed3ad360036040516020016106869190610b5b565b60405160208183030381529060405280519060200120036106db577fcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab6040516106ce9061119c565b60405180910390a161071d565b600061071c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071390611208565b60405180910390fd5b5b565b6040518060400160405280600a81526020017f636f6e6669726d696e6700000000000000000000000000000000000000000000815250600390816107639190610e36565b50565b600080fd5b6000819050919050565b61077e8161076b565b811461078957600080fd5b50565b60008135905061079b81610775565b92915050565b6000602082840312156107b7576107b6610766565b5b60006107c58482850161078c565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107f9826107ce565b9050919050565b610809816107ee565b82525050565b60006020820190506108246000830184610800565b92915050565b6108338161076b565b82525050565b600060208201905061084e600083018461082a565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561088e578082015181840152602081019050610873565b60008484015250505050565b6000601f19601f8301169050919050565b60006108b682610854565b6108c0818561085f565b93506108d0818560208601610870565b6108d98161089a565b840191505092915050565b600060208201905081810360008301526108fe81846108ab565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109408261076b565b915061094b8361076b565b925082820190508082111561096357610962610906565b5b92915050565b60006109748261076b565b915061097f8361076b565b925082820390508181111561099757610996610906565b5b92915050565b60006040820190506109b26000830185610800565b6109bf602083018461082a565b9392505050565b7f4e6f7420656e6f7567682062616c616e63652e205472616e736665722066616960008201527f6c65642100000000000000000000000000000000000000000000000000000000602082015250565b6000610a2260248361085f565b9150610a2d826109c6565b604082019050919050565b60006020820190508181036000830152610a5181610a15565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610a9f57607f821691505b602082108103610ab257610ab1610a58565b5b50919050565b600081905092915050565b60008190508160005260206000209050919050565b60008154610ae581610a87565b610aef8186610ab8565b94506001821660008114610b0a5760018114610b1f57610b52565b60ff1983168652811515820286019350610b52565b610b2885610ac3565b60005b83811015610b4a57815481890152600182019150602081019050610b2b565b838801955050505b50505092915050565b6000610b678284610ad8565b915081905092915050565b7f4163746976652053746174652e2046756e6374696f6e2077696c6c2070726f6360008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000610bce60238361085f565b9150610bd982610b72565b604082019050919050565b60006020820190508181036000830152610bfd81610bc1565b9050919050565b7f4e6f742041637469766520537461746500000000000000000000000000000000600082015250565b6000610c3a60108361085f565b9150610c4582610c04565b602082019050919050565b60006020820190508181036000830152610c6981610c2d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020601f8301049050919050565b600082821b905092915050565b600060088302610cec7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610caf565b610cf68683610caf565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610d33610d2e610d298461076b565b610d0e565b61076b565b9050919050565b6000819050919050565b610d4d83610d18565b610d61610d5982610d3a565b848454610cbc565b825550505050565b600090565b610d76610d69565b610d81818484610d44565b505050565b5b81811015610da557610d9a600082610d6e565b600181019050610d87565b5050565b601f821115610dea57610dbb81610ac3565b610dc484610c9f565b81016020851015610dd3578190505b610de7610ddf85610c9f565b830182610d86565b50505b505050565b600082821c905092915050565b6000610e0d60001984600802610def565b1980831691505092915050565b6000610e268383610dfc565b9150826002028217905092915050565b610e3f82610854565b67ffffffffffffffff811115610e5857610e57610c70565b5b610e628254610a87565b610e6d828285610da9565b600060209050601f831160018114610ea05760008415610e8e578287015190505b610e988582610e1a565b865550610f00565b601f198416610eae86610ac3565b60005b82811015610ed657848901518255600182019150602085019450602081019050610eb1565b86831015610ef35784890151610eef601f891682610dfc565b8355505b6001600288020188555050505b505050505050565b7f42616c616e6365206d7573742062652067726561746572207468616e2030207460008201527f6f20776974686472617700000000000000000000000000000000000000000000602082015250565b6000610f64602a8361085f565b9150'... 1518 more characters,       
      deployedBytecode: '',
      immutableReferences: {},
      generatedSources: [Array],
      deployedGeneratedSources: [Array],
      sourceMap: '58:3493:0:-:0;;;267:118;;;;;;;;;;299:10;291:5;;:18;;;;;;;;;;;;;;;;;;329:1;319:7;:11;;;;351:1;340:8;:12;;;;362:16;;;;;;;;;;;;;;;;;:5;:16;;;;;;:::i;:::-;;58:3493;;7:99:2;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:180::-;160:77;157:1;150:88;257:4;254:1;247:15;281:4;278:1;271:15;298:180;346:77;343:1;336:88;443:4;440:1;433:15;467:4;464:1;457:15;484:320;528:6;565:1;559:4;555:12;545:22;;612:1;606:4;602:12;633:18;623:81;;689:4;681:6;677:17;667:27;;623:81;751:2;743:6;740:14;720:18;717:38;714:84;;770:18;;:::i;:::-;714:84;535:269;484:320;;;:::o;810:141::-;859:4;882:3;874:11;;905:3;902:1;895:14;939:4;936:1;926:18;918:26;;810:141;;;:::o;957:93::-;994:6;1041:2;1036;1029:5;1025:14;1021:23;1011:33;;957:93;;;:::o;1056:107::-;1100:8;1150:5;1144:4;1140:16;1119:37;;1056:107;;;;:::o;1169:393::-;1238:6;1288:1;1276:10;1272:18;1311:97;1341:66;1330:9;1311:97;:::i;:::-;1429:39;1459:8;1448:9;1429:39;:::i;:::-;1417:51;;1501:4;1497:9;1490:5;1486:21;1477:30;;1550:4;1540:8;1536:19;1529:5;1526:30;1516:40;;1245:317;;1169:393;;;;;:::o;1568:77::-;1605:7;1634:5;1623:16;;1568:77;;;:::o;1651:60::-;1679:3;1700:5;1693:12;;1651:60;;;:::o;1717:142::-;1767:9;1800:53;1818:34;1827:24;1845:5;1827:24;:::i;:::-;1818:34;:::i;:::-;1800:53;:::i;:::-;1787:66;;1717:142;;;:::o;1865:75::-;1908:3;1929:5;1922:12;;1865:75;;;:::o;1946:269::-;2056:39;2087:7;2056:39;:::i;:::-;2117:91;2166:41;2190:16;2166:41;:::i;:::-;2158:6;2151:4;2145:11;2117:91;:::i;:::-;2111:4;2104:105;2022:193;1946:269;;;:::o;2221:73::-;2266:3;2221:73;:::o;2300:189::-;2377:32;;:::i;:::-;2418:65;2476:6;2468;2462:4;2418:65;:::i;:::-;2353:136;2300:189;;:::o;2495:186::-;2555:120;2572:3;2565:5;2562:14;2555:120;;;2626:39;2663:1;2656:5;2626:39;:::i;:::-;2599:1;2592:5;2588:13;2579:22;;2555:120;;;2495:186;;:::o;2687:543::-;2788:2;2783:3;2780:11;2777:446;;;2822:38;2854:5;2822:38;:::i;:::-;2906:29;2924:10;2906:29;:::i;:::-;2896:8;2892:44;3089:2;3077:10;3074:18;3071:49;;;3110:8;3095:23;;3071:49;3133:80;3189:22;3207:3;3189:22;:::i;:::-;3179:8;3175:37;3162:11;3133:80;:::i;:::-;2792:431;;2777:446;2687:543;;;:::o;3236:117::-;3290:8;3340:5;3334:4;3330:16;3309:37;;3236:117;;;;:::o;3359:169::-;3403:6;3436:51;3484:1;3480:6;3472:5;3469:1;3465:13;3436:51;:::i;:::-;3432:56;3517:4;3511;3507:15;3497:25;;3410:118;3359:169;;;;:::o;3533:295::-;3609:4;3755:29;3780:3;3774:4;3755:29;:::i;:::-;3747:37;;3817:3;3814:1;3810:11;3804:4;3801:21;3793:29;;3533:295;;;;:::o;3833:1395::-;3950:37;3983:3;3950:37;:::i;:::-;4052:18;4044:6;4041:30;4038:56;;;4074:18;;:::i;:::-;4038:56;4118:38;4150:4;4144:11;4118:38;:::i;:::-;4203:67;4263:6;4255;4249:4;4203:67;:::i;:::-;4297:1;4321:4;4308:17;;4353:2;4345:6;4342:14;4370:1;4365:618;;;;5027:1;5044:6;5041:77;;;5093:9;5088:3;5084:19;5078:26;5069:35;;5041:77;5144:67;5204:6;5197:5;5144:67;:::i;:::-;5138:4;5131:81;5000:222;4335:887;;4365:618;4417:4;4413:9;4405:6;4401:22;4451:37;4483:4;4451:37;:::i;:::-;4510:1;4524:208;4538:7;4535:1;4532:14;4524:208;;;4617:9;4612:3;4608:19;4602:26;4594:6;4587:42;4668:1;4660:6;4656:14;4646:24;;4715:2;4704:9;4700:18;4687:31;;4561:4;4558:1;4554:12;4549:17;;4524:208;;;4760:6;4751:7;4748:19;4745:179;;;4818:9;4813:3;4809:19;4803:26;4861:48;4903:4;4895:6;4891:17;4880:9;4861:48;:::i;:::-;4853:6;4846:64;4768:156;4745:179;4970:1;4966;4958:6;4954:14;4950:22;4944:4;4937:36;4372:611;;;4335:887;;3925:1303;;;3833:1395;;:::o;58:3493:0:-;;;;;;;',
      deployedSourceMap: '58:3493:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2838:144;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;887:161;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1054:136;;;:::i;:::-;;3344:152;;;:::i;:::-;;85:20;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2988:350;;;:::i;:::-;;111:22;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;752:125;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;161:19;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2838:144;2897:18;:16;:18::i;:::-;2937:6;2925:8;;:18;;;;;;;:::i;:::-;;;;;;;;2953:14;:12;:14::i;:::-;2838:144;:::o;887:161::-;947:14;:12;:14::i;:::-;994:7;983;;:18;;;;;;;:::i;:::-;;;;;;;;1016:25;1021:10;1033:7;;1016:25;;;;;;;:::i;:::-;;;;;;;;887:161;:::o;1054:136::-;1158:13;:11;:13::i;:::-;1054:136::o;3344:152::-;3396:22;:20;:22::i;:::-;3476:13;:11;:13::i;:::-;3344:152::o;85:20::-;;;;;;;;;;;;:::o;2988:350::-;3038:19;:17;:19::i;:::-;3081:8;;3070:7;;:19;3067:265;;3116:8;;3105:7;;:19;;;;;;;:::i;:::-;;;;;;;;3149:1;3138:8;:12;;;;3164:17;:15;:17::i;:::-;3067:265;;;3225:43;;;;;;:::i;:::-;;;;;;;;3293:1;3282:8;:12;;;;3308:13;:11;:13::i;:::-;3067:265;2988:350::o;111:22::-;;;;:::o;752:125::-;823:7;812;;:18;;;;;;;:::i;:::-;;;;;;;;845:25;850:10;862:7;845:25;;;;;;;:::i;:::-;;;;;;;;752:125;:::o;161:19::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1888:279::-;1984:19;1973:5;1956:23;;;;;;;;:::i;:::-;;;;;;;;;;;;;1946:34;;;;;;:57;1943:218;;2023:42;;;;;;:::i;:::-;;;;;;;;1943:218;;;2112:5;2104:34;;;;;;;;;;;;:::i;:::-;;;;;;;;;1943:218;1888:279::o;1720:75::-;1771:17;;;;;;;;;;;;;;;;;:5;:17;;;;;;:::i;:::-;;1720:75::o;1286:124::-;1355:1;1345:7;;:11;1337:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;1286:124::o;1416:130::-;1474:5;1466:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;1416:130::o;2451:296::-;2551:23;2540:5;2523:23;;;;;;;;:::i;:::-;;;;;;;;;;;;;2513:34;;;;;;:61;2510:231;;2595:46;;;;;;:::i;:::-;;;;;;;;2510:231;;;2688:5;2680:38;;;;;;;;;;;;:::i;:::-;;;;;;;;;2510:231;2451:296::o;1641:73::-;1691:16;;;;;;;;;;;;;;;;;:5;:16;;;;;;:::i;:::-;;1641:73::o;2173:272::-;2270:20;2259:5;2242:23;;;;;;;;:::i;:::-;;;;;;;;;;;;;2232:34;;;;;;:58;2229:210;;2311:43;;;;;;:::i;:::-;;;;;;;;2229:210;;;2401:5;2393:35;;;;;;;;;;;;:::i;:::-;;;;;;;;;2229:210;2173:272::o;1801:81::-;1855:20;;;;;;;;;;;;;;;;;:5;:20;;;;;;:::i;:::-;;1801:81::o;88:117:2:-;197:1;194;187:12;334:77;371:7;400:5;389:16;;334:77;;;:::o;417:122::-;490:24;508:5;490:24;:::i;:::-;483:5;480:35;470:63;;529:1;526;519:12;470:63;417:122;:::o;545:139::-;591:5;629:6;616:20;607:29;;645:33;672:5;645:33;:::i;:::-;545:139;;;;:::o;690:329::-;749:6;798:2;786:9;777:7;773:23;769:32;766:119;;;804:79;;:::i;:::-;766:119;924:1;949:53;994:7;985:6;974:9;970:22;949:53;:::i;:::-;939:63;;895:117;690:329;;;;:::o;1025:126::-;1062:7;1102:42;1095:5;1091:54;1080:65;;1025:126;;;:::o;1157:96::-;1194:7;1223:24;1241:5;1223:24;:::i;:::-;1212:35;;1157:96;;;:::o;1259:118::-;1346:24;1364:5;1346:24;:::i;:::-;1341:3;1334:37;1259:118;;:::o;1383:222::-;1476:4;1514:2;1503:9;1499:18;1491:26;;1527:71;1595:1;1584:9;1580:17;1571:6;1527:71;:::i;:::-;1383:222;;;;:::o;1611:118::-;1698:24;1716:5;1698:24;:::i;:::-;1693:3;1686:37;1611:118;;:::o;1735:222::-;1828:4;1866:2;1855:9;1851:18;1843:26;;1879:71;1947:1;1936:9;1932:17;1923:6;1879:71;:::i;:::-;1735:222;;;;:::o;1963:99::-;2015:6;2049:5;2043:12;2033:22;;1963:99;;;:::o;2068:169::-;2152:11;2186:6;2181:3;2174:19;2226:4;2221:3;2217:14;2202:29;;2068:169;;;;:::o;2243:246::-;2324:1;2334:113;2348:6;2345:1;2342:13;2334:113;;;2433:1;2428:3;2424:11;2418:18;2414:1;2409:3;2405:11;2398:39;2370:2;2367:1;2363:10;2358:15;;2334:113;;;2481:1;2472:6;2467:3;2463:16;2456:27;2305:184;2243:246;;;:::o;2495:102::-;2536:6;2587:2;2583:7;2578:2;2571:5;2567:14;2563:28;2553:38;;2495:102;;;:::o;2603:377::-;2691:3;2719:39;2752:5;2719:39;:::i;:::-;2774:71;2838:6;2833:3;2774:71;:::i;:::-;2767:78;;2854:65;2912:6;2907:3;2900:4;2893:5;2889:16;2854:65;:::i;:::-;2944:29;2966:6;2944:29;:::i;:::-;2939:3;2935:39;2928:46;;2695:285;2603:377;;;;:::o;2986:313::-;3099:4;3137:2;3126:9;3122:18;3114:26;;3186:9;3180:4;3176:20;3172:1;3161:9;3157:17;3150:47;3214:78;3287:4;3278:6;3214:78;:::i;:::-;3206:86;;2986:313;;;;:::o;3305:180::-;3353:77;3350:1;3343:88;3450:4;3447:1;3440:15;3474:4;3471:1;3464:15;3491:191;3531:3;3550:20;3568:1;3550:20;:::i;:::-;3545:25;;3584:20;3602:1;3584:20;:::i;:::-;3579:25;;3627:1;3624;3620:9;3613:16;;3648:3;3645:1;3642:10;3639:36;;;3655:18;;:::i;:::-;3639:36;3491:191;;;;:::o;3688:194::-;3728:4;3748:20;3766:1;3748:20;:::i;:::-;3743:25;;3782:20;3800:1;3782:20;:::i;:::-;3777:25;;3826:1;3823;3819:9;3811:17;;3850:1;3844:4;3841:11;3838:37;;;3855:18;;:::i;:::-;3838:37;3688:194;;;;:::o;3888:332::-;4009:4;4047:2;4036:9;4032:18;4024:26;;4060:71;4128:1;4117:9;4113:17;4104:6;4060:71;:::i;:::-;4141:72;4209:2;4198:9;4194:18;4185:6;4141:72;:::i;:::-;3888:332;;;;;:::o;4226:223::-;4366:34;4362:1;4354:6;4350:14;4343:58;4435:6;4430:2;4422:6;4418:15;4411:31;4226:223;:::o;4455:366::-;4597:3;4618:67;4682:2;4677:3;4618:67;:::i;:::-;4611:74;;4694:93;4783:3;4694:93;:::i;:::-;4812:2;4807:3;4803:12;4796:19;;4455:366;;;:::o;4827:419::-;4993:4;5031:2;5020:9;5016:18;5008:26;;5080:9;5074:4;5070:20;5066:1;5055:9;5051:17;5044:47;5108:131;5234:4;5108:131;:::i;:::-;5100:139;;4827:419;;;:::o;5252:180::-;5300:77;5297:1;5290:88;5397:4;5394:1;5387:15;5421:4;5418:1;5411:15;5438:320;5482:6;5519:1;5513:4;5509:12;5499:22;;5566:1;5560:4;5556:12;5587:18;5577:81;;5643:4;5635:6;5631:17;5621:27;;5577:81;5705:2;5697:6;5694:14;5674:18;5671:38;5668:84;;5724:18;;:::i;:::-;5668:84;5489:269;5438:320;;;:::o;5764:148::-;5866:11;5903:3;5888:18;;5764:148;;;;:::o;5918:141::-;5967:4;5990:3;5982:11;;6013:3;6010:1;6003:14;6047:4;6044:1;6034:18;6026:26;;5918:141;;;:::o;6089:874::-;6192:3;6229:5;6223:12;6258:36;6284:9;6258:36;:::i;:::-;6310:89;6392:6;6387:3;6310:89;:::i;:::-;6303:96;;6430:1;6419:9;6415:17;6446:1;6441:166;;;;6621:1;6616:341;;;;6408:549;;6441:166;6525:4;6521:9;6510;6506:25;6501:3;6494:38;6587:6;6580:14;6573:22;6565:6;6561:35;6556:3;6552:45;6545:52;;6441:166;;6616:341;6683:38;6715:5;6683:38;:::i;:::-;6743:1;6757:154;6771:6;6768:1;6765:13;6757:154;;;6845:7;6839:14;6835:1;6830:3;6826:11;6819:35;6895:1;6886:7;6882:15;6871:26;;6793:4;6790:1;6786:12;6781:17;;6757:154;;;6940:6;6935:3;6931:16;6924:23;;6623:334;;6408:549;;6196:767;;6089:874;;;;:::o;6969:269::-;7098:3;7120:92;7208:3;7199:6;7120:92;:::i;:::-;7113:99;;7229:3;7222:10;;6969:269;;;;:::o;7244:222::-;7384:34;7380:1;7372:6;7368:14;7361:58;7453:5;7448:2;7440:6;7436:15;7429:30;7244:222;:::o;7472:366::-;7614:3;7635:67;7699:2;7694:3;7635:67;:::i;:::-;7628:74;;7711:93;7800:3;7711:93;:::i;:::-;7829:2;7824:3;7820:12;7813:19;;7472:366;;;:::o;7844:419::-;8010:4;8048:2;8037:9;8033:18;8025:26;;8097:9;8091:4;8087:20;8083:1;8072:9;8068:17;8061:47;8125:131;8251:4;8125:131;:::i;:::-;8117:139;;7844:419;;;:::o;8269:166::-;8409:18;8405:1;8397:6;8393:14;8386:42;8269:166;:::o;8441:366::-;8583:3;8604:67;8668:2;8663:3;8604:67;:::i;:::-;8597:74;;8680:93;8769:3;8680:93;:::i;:::-;8798:2;8793:3;8789:12;8782:19;;8441:366;;;:::o;8813:419::-;8979:4;9017:2;9006:9;9002:18;8994:26;;9066:9;9060:4;9056:20;9052:1;9041:9;9037:17;9030:47;9094:131;9220:4;9094:131;:::i;:::-;9086:139;;8813:419;;;:::o;9238:180::-;9286:77;9283:1;9276:88;9383:4;9380:1;9373:15;9407:4;9404:1;9397:15;9424:93;9461:6;9508:2;9503;9496:5;9492:14;9488:23;9478:33;;9424:93;;;:::o;9523:107::-;9567:8;9617:5;9611:4;9607:16;9586:37;;9523:107;;;;:::o;9636:393::-;9705:6;9755:1;9743:10;9739:18;9778:97;9808:66;9797:9;9778:97;:::i;:::-;9896:39;9926:8;9915:9;9896:39;:::i;:::-;9884:51;;9968:4;9964:9;9957:5;9953:21;9944:30;;10017:4;10007:8;10003:19;9996:5;9993:30;9983:40;;9712:317;;9636:393;;;;;:::o;10035:60::-;10063:3;10084:5;10077:12;;10035:60;;;:::o;10101:142::-;10151:9;10184:53;10202:34;10211:24;10229:5;10211:24;:::i;:::-;10202:34;:::i;:::-;10184:53;:::i;:::-;10171:66;;10101:142;;;:::o;10249:75::-;10292:3;10313:5;10306:12;;10249:75;;;:::o;10330:269::-;10440:39;10471:7;10440:39;:::i;:::-;10501:91;10550:41;10574:16;10550:41;:::i;:::-;10542:6;10535:4;10529:11;10501:91;:::i;:::-;10495:4;10488:105;10406:193;10330:269;;;:::o;10605:73::-;10650:3;10605:73;:::o;10684:189::-;10761:32;;:::i;:::-;10802:65;10860:6;10852;10846:4;10802:65;:::i;:::-;10737:136;10684:189;;:::o;10879:186::-;10939:120;10956:3;10949:5;10946:14;10939:120;;;11010:39;11047:1;11040:5;11010:39;:::i;:::-;10983:1;10976:5;10972:13;10963:22;;10939:120;;;10879:186;;:::o;11071:543::-;11172:2;11167:3;11164:11;11161:446;;;11206:38;11238:5;11206:38;:::i;:::-;11290:29;11308:10;11290:29;:::i;:::-;11280:8;11276:44;11473:2;11461:10;11458:18;11455:49;;;11494:8;11479:23;;11455:49;11517:80;11573:22;11591:3;11573:22;:::i;:::-;11563:8;11559:37;11546:11;11517:80;:::i;:::-;11176:431;;11161:446;11071:543;;;:::o;11620:117::-;11674:8;11724:5;11718:4;11714:16;11693:37;;11620:117;;;;:::o;11743:169::-;11787:6;11820:51;11868:1;11864:6;11856:5;11853:1;11849:13;11820:51;:::i;:::-;11816:56;11901:4;11895;11891:15;11881:25;;11794:118;11743:169;;;;:::o;11917:295::-;11993:4;12139:29;12164:3;12158:4;12139:29;:::i;:::-;12131:37;;12201:3;12198:1;12194:11;12188:4;12185:21;12177:29;;11917:295;;;;:::o;12217:1395::-;12334:37;12367:3;12334:37;:::i;:::-;12436:18;12428:6;12425:30;12422:56;;;12458:18;;:::i;:::-;12422:56;12502:38;12534:4;12528:11;12502:38;:::i;:::-;12587:67;12647:6;12639;12633:4;12587:67;:::i;:::-;12681:1;12705:4;12692:17;;12737:2;12729:6;12726:14;12754:1;12749:618;;;;13411:1;13428:6;13425:77;;;13477:9;13472:3;13468:19;13462:26;13453:35;;13425:77;13528:67;13588:6;13581:5;13528:67;:::i;:::-;13522:4;13515:81;13384:222;12719:887;;12749:618;12801:4;12797:9;12789:6;12785:22;12835:37;12867:4;12835:37;:::i;:::-;12894:1;12908:208;12922:7;12919:1;12916:14;12908:208;;;13001:9;12996:3;12992:19;12986:26;12978:6;12971:42;13052:1;13044:6;13040:14;13030:24;;13099:2;13088:9;13084:18;13071:31;;12945:4;12942:1;12938:12;12933:17;;12908:208;;;13144:6;13135:7;13132:19;13129:179;;;13202:9;13197:3;13193:19;13187:26;13245:48;13287:4;13279:6;13275:17;13264:9;13245:48;:::i;:::-;13237:6;13230:64;13152:156;13129:179;13354:1;13350;13342:6;1'... 2746 more characters,
      source: '// SPDX-License-Identifier: MIT\n' +
        'pragma solidity ^0.8.19;\n' +
        '\n' +
        'contract BankAccount{\n' +
        '\n' +
        '    address public owner;\n' +
        '    uint256 public balance;\n' +
        '    uint256 pendingM;\n' +
        '    string public state;\n' +
        '    event Info(address _address, uint256 _value);\n' +
        '    event Log(string _notif);\n' +
        '\n' +
        '    constructor() {\n' +
        '        owner = msg.sender;\n' +
        '        balance = 0;\n' +
        '        pendingM = 0;\n' +
        '        state = "active";\n' +
        '    }\n' +
        '\n' +
        '    // Modifier to exception handling\n' +
        '\n' +
        '    modifier notUsing() {\n' +
        '        require(false, "This function is not used in this version - by modifier");\n' +
        '        _;\n' +
        '    }\n' +
        '\n' +
        '    modifier onlyOwner() {\n' +
        '        require(msg.sender == owner, "Only owner can use this function");\n' +
        '        _;\n' +
        '    }\n' +
        '\n' +
        '    ///////////////////////////////////////////////\n' +
        '\n' +
        '    //Basic Functions\n' +
        '\n' +
        '    function deposit(uint256 _amount) virtual public { \n' +
        '        balance += _amount;\n' +
        '        emit Info(msg.sender, _amount);\n' +
        '    }\n' +
        '    \n' +
        '    function withdraw(uint256 _amount) virtual public {\n' +
        '        ruleWithdraw(); //condition\n' +
        '        balance -= _amount;\n' +
        '        emit Info(msg.sender, balance);\n' +
        '    }\n' +
        '\n' +
        '    function faultedFunc() virtual public { //faulted function which will be deleted in subcontract\n' +
        '        faultedCond(); //condition\n' +
        '    }\n' +
        '\n' +
        '    /////////////////////////////////////////////// \n' +
        '\n' +
        '    // Condition Control Functions\n' +
        '\n' +
        '    function ruleWithdraw() virtual internal {\n' +
        '        require(balance > 0, "Balance must be greater than 0 to withdraw");\n' +
        '    }\n' +
        '\n' +
        '    function faultedCond() virtual internal {\n' +
        '        require(false, "This Condition function must be deleted in sub-contract");\n' +
        '    }\n' +
        '\n' +
        '    ///////////////////////////////////////////////\n' +
        '\n' +
        '    // State Control Functions    \n' +
        '\n' +
        '    function stateActive() virtual internal {\n' +
        '        state = "active";\n' +
        '    }\n' +
        '\n' +
        '    function statePending() virtual internal {\n' +
        '        state = "pending";\n' +
        '    }\n' +
        '\n' +
        '    function stateConfirming() virtual internal {\n' +
        '        state = "confirming";\n' +
        '    }\n' +
        '\n' +
        '    function checkStateActive() virtual internal {\n' +
        '        if(keccak256(abi.encodePacked(state)) == keccak256("active")){\n' +
        '            emit Log("Active State. Function will process");\n' +
        '        }\n' +
        '        else {\n' +
        '            require(false, "Not Active State");            \n' +
        '        }\n' +
        '    }\n' +
        '\n' +
        '    function checkStatePending() virtual internal {\n' +
        '        if(keccak256(abi.encodePacked(state)) == keccak256("pending")){\n' +
        '             emit Log("Pending State. Function will process");\n' +
        '        }\n' +
        '        else {\n' +
        '            require(false, "Not Pending State");\n' +
        '        }\n' +
        '    }\n' +
        '\n' +
        '    function checkStateConfirming() virtual internal {\n' +
        '        if(keccak256(abi.encodePacked(state)) == keccak256("confirming")){\n' +
        '             emit Log("Confirming State. Function will process");\n' +
        '        }\n' +
        '        else {\n' +
        '            require(false, "Not Confirming State");            \n' +
        '        }\n' +
        '    }\n' +
        '\n' +
        '    /////////////////////////////////////////////// \n' +
        '\n' +
        '    // State Related Function\n' +
        '\n' +
        '    function transfer(uint256 amount) virtual public {\n' +
        '        checkStateActive();\n' +
        '        pendingM += amount;\n' +
        '        statePending();        \n' +
        '    }\n' +
        '\n' +
        '    function serverConfirm() virtual public {\n' +
        '        checkStatePending();\n' +
        '        if(balance >= pendingM) {\n' +
        '            balance -= pendingM;\n' +
        '            pendingM = 0;\n' +
        '            stateConfirming();\n' +
        '        }\n' +
        '        else {\n' +
        '            emit Log("Not enough balance. Transfer failed!");\n' +
        '            pendingM = 0;\n' +
        '            stateActive();\n' +
        '        }\n' +
        '    }\n' +
        '\n' +
        '    function transferSuccess() virtual public {\n' +
        '        checkStateConfirming();\n' +
        '        //transfer success pendingM to receiver\n' +
        '        stateActive();\n' +
        '    }\n' +
        '\n' +
        '    ///////////////////////////////////////////////\n' +
        '}',
      sourcePath: '/mnt/c/Users/user/vscode_source/BankExample/contracts/BankAccount.sol',
      ast: [Object],
      legacyAST: undefined,
      compiler: [Object],
      networks: [Object],
      schemaVersion: '3.4.16',
      updatedAt: '2023-11-29T19:56:55.251Z',
      networkType: 'ethereum',
      devdoc: [Object],
      userdoc: [Object],
      db: undefined
    },
    configureNetwork: [Function: bound configureNetwork],
    setProvider: [Function: bound setProvider],
    new: [Function: bound new] {
      estimateGas: [Function: bound estimateDeployment],
      request: [Function: bound requestDeployment]
    },
    at: [Function: bound at] AsyncFunction,
    deployed: [Function: bound deployed] AsyncFunction,
    defaults: [Function: bound defaults],
    hasNetwork: [Function: bound hasNetwork],
    isDeployed: [Function: bound isDeployed],
    detectNetwork: [Function: bound detectNetwork] AsyncFunction,
    setNetwork: [Function: bound setNetwork],
    setNetworkType: [Function: bound setNetworkType],
    setWallet: [Function: bound setWallet],
    resetAddress: [Function: bound resetAddress],
    link: [Function: bound link],
    clone: [Function: bound clone],
    addProp: [Function: bound addProp],
    toJSON: [Function: bound toJSON],
    decodeLogs: [Function: bound decodeLogs],
    enums: {},
    class_defaults: { from: '0x32cD93B5680111969ce09fD481f931DC86efe6B4' },
    interfaceAdapter: Web3InterfaceAdapter { web3: [Web3Shim] },
    web3: Web3Shim {
      currentProvider: [Getter/Setter],
      _requestManager: [RequestManager],
      givenProvider: null,
      providers: [Object],
      _provider: [HttpProvider],
      setProvider: [Function (anonymous)],
      setRequestManager: [Function (anonymous)],
      BatchRequest: [Function: bound Batch],
      extend: [Function],
      version: '1.10.0',
      utils: [Object],
      eth: [Eth],
      shh: [Shh],
      bzz: [Bzz],
      networkType: 'ethereum'
    },
    currentProvider: HttpProvider {
      withCredentials: undefined,
      timeout: 0,
      headers: undefined,
      agent: undefined,
      connected: false,
      host: 'http://172.20.240.1:7545',
      httpAgent: [Agent],
      send: [Function (anonymous)],
      request: [Function: bound modifiedRequest] AsyncFunction,
      _alreadyWrapped: true
    },
    network_id: '5777',
    disableConfirmationListener: undefined,
    ens: { enabled: false, registryAddress: undefined }
  },
  methods: {
    'balance()': [Function (anonymous)] {
      call: [Function (anonymous)],
      sendTransaction: [Function (anonymous)],
      estimateGas: [Function (anonymous)],
      request: [Function (anonymous)]
    },
    'owner()': [Function (anonymous)] {
      call: [Function (anonymous)],
      sendTransaction: [Function (anonymous)],
      estimateGas: [Function (anonymous)],
      request: [Function (anonymous)]
    },
    'state()': [Function (anonymous)] {
      call: [Function (anonymous)],
      sendTransaction: [Function (anonymous)],
      estimateGas: [Function (anonymous)],
      request: [Function (anonymous)]
    },
    'deposit(uint256)': [Function (anonymous)] {
      call: [Function (anonymous)],
      sendTransaction: [Function (anonymous)],
      estimateGas: [Function (anonymous)],
      request: [Function (anonymous)]
    },
    'withdraw(uint256)': [Function (anonymous)] {
      call: [Function (anonymous)],
      sendTransaction: [Function (anonymous)],
      estimateGas: [Function (anonymous)],
      request: [Function (anonymous)]
    },
    'faultedFunc()': [Function (anonymous)] {
      call: [Function (anonymous)],
      sendTransaction: [Function (anonymous)],
      estimateGas: [Function (anonymous)],
      request: [Function (anonymous)]
    },
    'transfer(uint256)': [Function (anonymous)] {
      call: [Function (anonymous)],
      sendTransaction: [Function (anonymous)],
      estimateGas: [Function (anonymous)],
      request: [Function (anonymous)]
    },
    'serverConfirm()': [Function (anonymous)] {
      call: [Function (anonymous)],
      sendTransaction: [Function (anonymous)],
      estimateGas: [Function (anonymous)],
      request: [Function (anonymous)]
    },
    'transferSuccess()': [Function (anonymous)] {
      call: [Function (anonymous)],
      sendTransaction: [Function (anonymous)],
      estimateGas: [Function (anonymous)],
      request: [Function (anonymous)]
    }
  },
  abi: [
    {
      inputs: [],
      stateMutability: 'nonpayable',
      type: 'constructor',
      constant: undefined,
      payable: undefined
    },
    {
      anonymous: false,
      inputs: [Array],
      name: 'Info',
      type: 'event',
      constant: undefined,
      payable: undefined,
      signature: '0x2e2a4a34dacfe23211d7cd5f2269b17fe50bc4440e8ac080de1026da21e8007d'
    },
    {
      anonymous: false,
      inputs: [Array],
      name: 'Log',
      type: 'event',
      constant: undefined,
      payable: undefined,
      signature: '0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab'
    },
    {
      inputs: [],
      name: 'balance',
      outputs: [Array],
      stateMutability: 'view',
      type: 'function',
      constant: true,
      payable: undefined,
      signature: '0xb69ef8a8'
    },
    {
      inputs: [],
      name: 'owner',
      outputs: [Array],
      stateMutability: 'view',
      type: 'function',
      constant: true,
      payable: undefined,
      signature: '0x8da5cb5b'
    },
    {
      inputs: [],
      name: 'state',
      outputs: [Array],
      stateMutability: 'view',
      type: 'function',
      constant: true,
      payable: undefined,
      signature: '0xc19d93fb'
    },
    {
      inputs: [Array],
      name: 'deposit',
      outputs: [],
      stateMutability: 'nonpayable',
      type: 'function',
      constant: undefined,
      payable: undefined,
      signature: '0xb6b55f25'
    },
    {
      inputs: [Array],
      name: 'withdraw',
      outputs: [],
      stateMutability: 'nonpayable',
      type: 'function',
      constant: undefined,
      payable: undefined,
      signature: '0x2e1a7d4d'
    },
    {
      inputs: [],
      name: 'faultedFunc',
      outputs: [],
      stateMutability: 'nonpayable',
      type: 'function',
      constant: undefined,
      payable: undefined,
      signature: '0x40546f49'
    },
    {
      inputs: [Array],
      name: 'transfer',
      outputs: [],
      stateMutability: 'nonpayable',
      type: 'function',
      constant: undefined,
      payable: undefined,
      signature: '0x12514bba'
    },
    {
      inputs: [],
      name: 'serverConfirm',
      outputs: [],
      stateMutability: 'nonpayable',
      type: 'function',
      constant: undefined,
      payable: undefined,
      signature: '0xaccc5d07'
    },
    {
      inputs: [],
      name: 'transferSuccess',
      outputs: [],
      stateMutability: 'nonpayable',
      type: 'function',
      constant: undefined,
      payable: undefined,
      signature: '0x54c47b2f'
    }
  ],
  address: '0x459Ed9C4B4284db39e2A12771c1eDb8be303D74D',
  transactionHash: undefined,
  contract: Contract {
    setProvider: [Function (anonymous)],
    currentProvider: [Getter/Setter],
    _requestManager: RequestManager {
      provider: [HttpProvider],
      providers: [Object],
      subscriptions: Map(0) {}
    },
    givenProvider: null,
    providers: {
      WebsocketProvider: [Function: WebsocketProvider],
      HttpProvider: [Function: HttpProvider],
      IpcProvider: [Function: IpcProvider]
    },
    _provider: HttpProvider {
      withCredentials: undefined,
      timeout: 0,
      headers: undefined,
      agent: undefined,
      connected: false,
      host: 'http://172.20.240.1:7545',
      httpAgent: [Agent],
      send: [Function (anonymous)],
      request: [Function: bound modifiedRequest] AsyncFunction,
      _alreadyWrapped: true
    },
    setRequestManager: [Function (anonymous)],
    BatchRequest: [Function: bound Batch],
    extend: [Function: ex] {
      formatters: [Object],
      utils: [Object],
      Method: [Function: Method]
    },
    clearSubscriptions: [Function (anonymous)],
    options: { address: [Getter/Setter], jsonInterface: [Getter/Setter] },
    handleRevert: [Getter/Setter],
    defaultCommon: [Getter/Setter],
    defaultHardfork: [Getter/Setter],
    defaultChain: [Getter/Setter],
    transactionPollingTimeout: [Getter/Setter],
    transactionPollingInterval: [Getter/Setter],
    transactionConfirmationBlocks: [Getter/Setter],
    transactionBlockTimeout: [Getter/Setter],
    blockHeaderTimeout: [Getter/Setter],
    defaultAccount: [Getter/Setter],
    defaultBlock: [Getter/Setter],
    methods: {
      balance: [Function: bound _createTxObject],
      '0xb69ef8a8': [Function: bound _createTxObject],
      'balance()': [Function: bound _createTxObject],
      owner: [Function: bound _createTxObject],
      '0x8da5cb5b': [Function: bound _createTxObject],
      'owner()': [Function: bound _createTxObject],
      state: [Function: bound _createTxObject],
      '0xc19d93fb': [Function: bound _createTxObject],
      'state()': [Function: bound _createTxObject],
      deposit: [Function: bound _createTxObject],
      '0xb6b55f25': [Function: bound _createTxObject],
      'deposit(uint256)': [Function: bound _createTxObject],
      withdraw: [Function: bound _createTxObject],
      '0x2e1a7d4d': [Function: bound _createTxObject],
      'withdraw(uint256)': [Function: bound _createTxObject],
      faultedFunc: [Function: bound _createTxObject],
      '0x40546f49': [Function: bound _createTxObject],
      'faultedFunc()': [Function: bound _createTxObject],
      transfer: [Function: bound _createTxObject],
      '0x12514bba': [Function: bound _createTxObject],
      'transfer(uint256)': [Function: bound _createTxObject],
      serverConfirm: [Function: bound _createTxObject],
      '0xaccc5d07': [Function: bound _createTxObject],
      'serverConfirm()': [Function: bound _createTxObject],
      transferSuccess: [Function: bound _createTxObject],
      '0x54c47b2f': [Function: bound _createTxObject],
      'transferSuccess()': [Function: bound _createTxObject]
    },
    events: {
      Info: [Function: bound ],
      '0x2e2a4a34dacfe23211d7cd5f2269b17fe50bc4440e8ac080de1026da21e8007d': [Function: bound ],
      'Info(address,uint256)': [Function: bound ],
      Log: [Function: bound ],
      '0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab': [Function: bound ],
      'Log(string)': [Function: bound ],
      allEvents: [Function: bound ]
    },
    _address: '0x459Ed9C4B4284db39e2A12771c1eDb8be303D74D',
    _jsonInterface: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object]
    ]
  },
  Info: [Function (anonymous)],
  Log: [Function (anonymous)],
  balance: [Function (anonymous)] {
    call: [Function (anonymous)],
    sendTransaction: [Function (anonymous)],
    estimateGas: [Function (anonymous)],
    request: [Function (anonymous)]
  },
  owner: [Function (anonymous)] {
    call: [Function (anonymous)],
    sendTransaction: [Function (anonymous)],
    estimateGas: [Function (anonymous)],
    request: [Function (anonymous)]
  },
  state: [Function (anonymous)] {
    call: [Function (anonymous)],
    sendTransaction: [Function (anonymous)],
    estimateGas: [Function (anonymous)],
    request: [Function (anonymous)]
  },
  deposit: [Function (anonymous)] {
    call: [Function (anonymous)],
    sendTransaction: [Function (anonymous)],
    estimateGas: [Function (anonymous)],
    request: [Function (anonymous)]
  },
  withdraw: [Function (anonymous)] {
    call: [Function (anonymous)],
    sendTransaction: [Function (anonymous)],
    estimateGas: [Function (anonymous)],
    request: [Function (anonymous)]
  },
  faultedFunc: [Function (anonymous)] {
    call: [Function (anonymous)],
    sendTransaction: [Function (anonymous)],
    estimateGas: [Function (anonymous)],
    request: [Function (anonymous)]
  },
  transfer: [Function (anonymous)] {
    call: [Function (anonymous)],
    sendTransaction: [Function (anonymous)],
    estimateGas: [Function (anonymous)],
    request: [Function (anonymous)]
  },
  serverConfirm: [Function (anonymous)] {
    call: [Function (anonymous)],
    sendTransaction: [Function (anonymous)],
    estimateGas: [Function (anonymous)],
    request: [Function (anonymous)]
  },
  transferSuccess: [Function (anonymous)] {
    call: [Function (anonymous)],
    sendTransaction: [Function (anonymous)],
    estimateGas: [Function (anonymous)],
    request: [Function (anonymous)]
  },
  sendTransaction: [Function (anonymous)],
  estimateGas: [Function (anonymous)],
  call: [Function (anonymous)],
  send: [Function (anonymous)],
  allEvents: [Function (anonymous)],
  getPastEvents: [Function (anonymous)]
}